description = 'Spring XD'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories {
		maven { url "http://repo.springsource.org/plugins-snapshot" }
	}
	dependencies {
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.3")
		classpath("org.springframework.build.gradle:docbook-reference-plugin:0.2.7-SNAPSHOT")
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.4.1'
		classpath 'org.ajoberstar:gradle-git:0.4.0'
		classpath 'me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1'
	}
}

ext {
	linkHomepage = 'https://github.com/spring-projects/spring-xd'
	linkCi       = 'https://build.springsource.org/browse/XD'
	linkIssue    = 'https://jira.springsource.org/browse/XD'
	linkScmUrl           = 'https://github.com/spring-projects/spring-xd'
	linkScmConnection    = 'https://github.com/spring-projects/spring-xd.git'
	linkScmDevConnection = 'git@github.com:spring-projects/spring-xd.git'

	javadocLinks = [
		"http://static.springsource.org/spring-shell/docs/current/api/"
	] as String[]

}

allprojects {
	group = 'org.springframework.xd'

	repositories {
		mavenCentral()
		maven { url 'http://repo.springsource.org/libs-milestone' }
 		maven { url 'http://repo.springsource.org/libs-snapshot' }
		maven { url 'http://repo.springsource.org/plugins-release' }
		maven { url 'http://repo.springsource.org/plugins-snapshot' }
		maven { url 'https://repo.eclipse.org/content/repositories/paho-releases' }
	}
}

def javaProjects() {
    def nonJavaProjects = ['redis', 'spring-xd-ui']
    subprojects.findAll { project -> !nonJavaProjects.contains(project.name) && !project.path.startsWith(':modules.')}
}

def moduleProjects() {
    subprojects.findAll { project -> project.path.startsWith(':modules.')}
}

ext {
	jacksonVersion = '2.2.2'
	jsonPathVersion = '0.8.1'
	junitVersion = '4.11'
	hamcrestVersion = '1.3'
	hamcrestDateVersion = '0.9.3'
	hsqldbVersion = '2.3.0'
	jodaTimeVersion = '2.1'
	jolokiaVersion = '1.1.2'
	springVersion = '4.0.0.M3'
	springBatchVersion = '2.2.3.BUILD-SNAPSHOT'
	springIntegrationVersion = '3.0.0.BUILD-SNAPSHOT'
	springBatchAdminMgrVersion = '1.3.0.M1'
	springShellVersion = '1.1.0.M1'
	springIntegrationSplunkVersion = '1.0.0.M1'
	springDataMongoVersion = '1.1.1.RELEASE'
	springDataRedisVersion = '1.1.0.RELEASE'
	springDataCommonsVersion = '1.6.0.M1'
	springDataGemfireVersion = '1.3.2.RELEASE'
	tomcatJdbcPoolVersion = '7.0.42'
	reactorVersion = '1.0.0.RC1'
	lettuceVersion = '2.3.3'
	springDataHadoopVersion = '1.0.1.RELEASE'
	hadoop12Version = '1.2.1'
	hadoop20Version = '2.0.6-alpha'
	cdh4Version = '2.0.0-cdh4.3.1'
	hdp13Version = '1.2.0'
	phd1Version = '2.0.2-alpha-gphd-2.0.1.0'
	springHATEOASVersion = '0.7.0.RELEASE'
	springPluginVersion = '0.8.0.RELEASE'
	tomcatVersion = '7.0.35'
	commonsBeanUtilsVersion = '1.6'
	slf4jVersion = '1.7.5'
	log4jVersion = '1.2.17'
	args4jVersion = '2.0.25'
	mockitoVersion = '1.9.5'
	javaxMailVersion = '1.5.0'
	kryoVersion = '2.21'

}

def forceSpringVersion(p) {
	p.configurations.all {
		resolutionStrategy {
			eachDependency { DependencyResolveDetails details ->
				//Force same version of Spring across the board
				if (details.requested.group == 'org.springframework') {
					details.useVersion "$springVersion"
				}
			}
		}
	}
}

configure(javaProjects()) { subproject ->

	apply plugin: 'groovy'
	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'javadocHotfix'

	forceSpringVersion(subproject)

	compileJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}

	compileTestJava {
		sourceCompatibility=1.7
		targetCompatibility=1.7
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	// Include project specific settings
	task eclipseSettings(type: Copy) {
		from rootProject.files(
			"src/eclipse/org.eclipse.jdt.ui.prefs",
			"src/eclipse/de.loskutov.anyedit.AnyEditTools.prefs")
		into project.file('.settings/')
	}

	task eclipseJdtPrepare(type: Copy) {
		from rootProject.file("src/eclipse/org.eclipse.jdt.core.prefs")
		into project.file(".settings/")
	}

	task cleanEclipseJdtUi(type: Delete) {
		delete project.file(".settings/org.eclipse.jdt.ui.prefs")
		delete project.file(".settings/org.eclipse.jdt.core.prefs")
	}

	tasks["eclipseJdt"].dependsOn(eclipseJdtPrepare)
	tasks["cleanEclipse"].dependsOn(cleanEclipseJdtUi)
	tasks["eclipse"].dependsOn(eclipseSettings)

	sourceSets {
		test {
			groovy {
				srcDirs = ['src/test/java']
				resources {
					srcDirs = ['src/test/resources', 'src/test/java']
				}
			}
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile "junit:junit:$junitVersion"
		testCompile "org.codehaus.groovy:groovy-all:2.1.0"
		testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.2.201302030002", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:all"]

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.xd.*"
		jvmArgs "-XX:MaxPermSize=256m"
		jvmArgs "-Djava.net.preferIPv4Stack=true"
	}

	javadoc {
		description = "Generates project-level javadoc for use in -javadoc jar"

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.links(javadocLinks)

		// suppress warnings due to cross-module @see and @link references;
		// note that global 'api' task does display all warnings.
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	jar {
		manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = subproject.name
		manifest.attributes["Implementation-Version"] = subproject.version
		exclude('log4j.properties')
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

configure(moduleProjects()) { moduleProject ->

	// We only apply the java plugin b/c the eclipse/idea plugins
	// require it to emit e.g. a .classpath file. Those projects don't actually
	// contain java code, so reset everything (prevents creation of
	// the 'build' directory, etc)
	apply plugin: 'java'
	task build(overwrite: true) {}
	task clean(overwrite: true) {}
	compileJava {
		sourceCompatibility=1.6
		targetCompatibility=1.6
	}


	apply plugin: 'eclipse'
	apply plugin: 'idea'

	forceSpringVersion(moduleProject)

	task copyLibs(type: Copy) {
		def containerDeps = project(':spring-xd-dirt').configurations.runtime

		inputs.property('deps', moduleProject.configurations.runtime.minus(containerDeps))
		outputs.dir project.file('lib/')

		from moduleProject.configurations.runtime.minus(containerDeps)
		into project.file('lib/')
	}


	['build', 'eclipse', 'idea'].each {t -> tasks[t].dependsOn copyLibs}

	task cleanLibs(type: Delete)  {
		delete copyLibs.outputs
	}

	['clean', 'cleanEclipse', 'cleanIdea'].each {t -> tasks[t].dependsOn cleanLibs}

	project(':spring-xd-dirt').tasks['build'].dependsOn(moduleProject.tasks['build'])
}


project('spring-xd-analytics') {
	description = 'Spring XD Anayltics'
	dependencies {
		compile project(":spring-xd-tuple")
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
		compile "org.springframework.data:spring-data-commons:$springDataCommonsVersion"
		compile "com.lambdaworks:lettuce:$lettuceVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "joda-time:joda-time:$jodaTimeVersion"
		testCompile project(":spring-xd-test")
		testCompile "nl.jqno.equalsverifier:equalsverifier:1.1.3"
		testCompile "org.springframework:spring-test:$springVersion"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}
		testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		runtime "log4j:log4j:$log4jVersion",
				"org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion"
	}
}

project('spring-xd-dirt') {
	description = 'Spring XD DIRT'
	configurations {
		//[runtime,testRuntime]*.exclude group: 'org.codehaus.jackson'
	}
	dependencies {

		// See XD-903 for breakdown
		// ************* Common to both Server and Container
		compile "org.springframework:spring-aop:$springVersion"
		compile project(":spring-xd-analytics")
		compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
		compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"
		compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		compile "log4j:log4j:$log4jVersion"
		compile "org.springframework.integration:spring-integration-amqp:$springIntegrationVersion"
		compile ("org.apache.activemq:activemq-core:5.6.0") {
			exclude group: 'org.mortbay.jetty'
			exclude group: 'org.fusesource.fuse-extra'
		}
		compile "org.springframework.integration:spring-integration-event:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-groovy:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-jmx:$springIntegrationVersion"
		compile "org.jolokia:jolokia-spring:$jolokiaVersion"
		compile "com.esotericsoftware.kryo:kryo:$kryoVersion"
		compile "com.lambdaworks:lettuce:$lettuceVersion"
		compile "args4j:args4j:$args4jVersion"
		compile "commons-lang:commons-lang:2.4"

		compile "org.hsqldb:hsqldb:$hsqldbVersion"
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.apache.tomcat:tomcat-jdbc:$tomcatJdbcPoolVersion"
		compile ("org.springframework.batch:spring-batch-admin-manager:$springBatchAdminMgrVersion") {
			exclude group: 'hsqldb'
		}
		compile ("org.springframework.batch:spring-batch-integration:1.2.2.RELEASE") {
			exclude group: 'org.springframework.integration'
			exclude group: 'org.springframework'
		}


		runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
		runtime	"org.slf4j:slf4j-log4j12:$slf4jVersion"

		// ************* Dirt-Server only
		compile project(':spring-xd-rest-domain')
		compile "org.springframework:spring-webmvc:$springVersion"
		compile "org.springframework.plugin:spring-plugin-core:$springPluginVersion"
		compile "org.springframework.data:spring-data-commons:$springDataCommonsVersion"
		compile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
		compile "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"
		compile "org.apache.tomcat:tomcat-jsp-api:$tomcatVersion"

		// ************* Dirt-Container only (per se)
		compile project(":spring-xd-module")
		compile "com.jayway.jsonpath:json-path:$jsonPathVersion"
		compile "com.eaio.uuid:uuid:3.2"

		// ************* Container: Modules (should move on their own: XD-915)
		compile project(":spring-xd-hadoop")
		compile project(":spring-xd-jdbc")
		compile ("org.springframework.integration:spring-integration-mqtt:1.0.0.BUILD-SNAPSHOT") {
			exclude group: 'org.springframework.integration'
		}
		compile "org.springframework.integration:spring-integration-jms:$springIntegrationVersion"

		// Splunk also needed for o.s.i.x
		compile "org.springframework.integration:spring-integration-splunk:$springIntegrationSplunkVersion"
		// Gemfire also needed for o.s.i.x
		compile "org.springframework.integration:spring-integration-gemfire:$springIntegrationVersion"
		// Twitter also needed for o.s.i.x
		compile "org.springframework.integration:spring-integration-twitter:$springIntegrationVersion"

		// ************* Container: Imposed by some Module (can't move)
		compile "com.sun.mail:javax.mail:$javaxMailVersion"
		runtime project(":spring-xd-reactor")


		// ************* Test
		testCompile project(":spring-xd-test")
		testCompile "com.jayway.jsonpath:json-path:0.8.1"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}
	}

    apply plugin:'application'
	// skip the startScripts task to avoid default start script generation
	startScripts.setEnabled(false)
	mainClassName = "org.springframework.xd.dirt.server.SingleNodeMain"

	test {
		systemProperties["xd.home"] = "${rootProject.projectDir}"
	}

	task configFiles {
		def config = file("$rootDir/config")
		outputs.dir config
	}

	task moduleFiles {
		def modules = file("$rootDir/modules")
		outputs.dir modules
	}

    task xdUiFiles {
            def uiFiles = file("$rootDir/spring-xd-ui")
            outputs.dir uiFiles
    }

	task scriptFiles {
		def scripts = file("$rootDir/scripts/xd")
		outputs.dir scripts
	}

	applicationDistribution.from(configFiles) {
		into "config"
	}

	applicationDistribution.from(scriptFiles) {
		into "bin"
	}

	applicationDistribution.from(moduleFiles) {
		into "modules"
	}

	applicationDistribution.from(xdUiFiles) {
		into "spring-xd-ui"
	}

	task cleanDataDir(type: Delete) {
		delete "$rootDir/data"
	}

	tasks["clean"].dependsOn("cleanDataDir")
}

project('spring-xd-http') {
	description = 'Spring XD HTTP'
	dependencies {
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "io.netty:netty:3.6.6.Final"
		compile "org.springframework:spring-web:$springVersion"
		testCompile project(":spring-xd-test")
	}
}

project ('spring-xd-gemfire-server') {
	description = 'Gemfire Server to support XD Development and Demos'
	dependencies {
		compile "commons-beanutils:commons-beanutils:$commonsBeanUtilsVersion"
		compile "org.springframework.data:spring-data-gemfire:$springDataGemfireVersion"
		compile project(':spring-xd-tuple')
		runtime "log4j:log4j:$log4jVersion",
				"org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion"
	}
	apply plugin:'application'
	// skip the startScripts task to avoid default start script generation
	startScripts.setEnabled(false)

	task(launch, dependsOn: 'classes', type: JavaExec) {
		main = 'org.springframework.xd.gemfire.CacheServer'
		classpath = sourceSets.test.runtimeClasspath
		if (rootProject.hasProperty('config')) {
			args = ["${rootProject.getProperty('config')}"]
		}
	}

	mainClassName = 'org.springframework.xd.gemfire.CacheServer'

	task configFiles {
		def configs = file("$rootDir/spring-xd-gemfire-server/config")
		outputs.dir configs
	}

	applicationDistribution.from(configFiles) {
		into "config"
	}

	task scriptFiles {
		def scripts = file("$rootDir/scripts/gemfire")
		outputs.dir scripts
	}

	applicationDistribution.from(scriptFiles) {
		into "bin"
	}
}


project('redis') {
	description = 'Redis distribution'
	task syncScriptFiles(type: Sync) {
		from "$rootDir/scripts/redis"
		into project.file("${project.buildDir}/bin")
	}

	task sourceDist {
		def distFile = file("$rootDir/redis/dist")
		outputs.dir distFile
	}

	task syncDistFile(type: Sync) {
		from "$rootDir/redis/dist"
		into project.file("${project.buildDir}/dist")
	}

	task bundleRedis(dependsOn: ['syncScriptFiles', 'syncDistFile']) {
		description = "Bundle redis source dist with install script"
	}

	task clean(type: Delete) {
		description = "Wipes Redis build directory"
		delete 'build'
	}
}

project('spring-xd-module') {
	description = 'Spring XD Module'
	dependencies {
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-web:$springVersion"
	}
}

project('spring-integration-module') {
	description = 'Spring Integration Module Support'
	dependencies {
		compile project(":spring-xd-module")
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
	}
}

project('spring-xd-tuple') {
	description = 'Spring XD Tuple'
	dependencies {
	    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.batch:spring-batch-infrastructure:$springBatchVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		testCompile ("org.mockito:mockito-core:$mockitoVersion") {
			exclude group:'org.hamcrest'
		}
	}
}

project('spring-xd-rest-client') {
	description = 'Spring XD REST Client'
	dependencies {
		compile "org.springframework:spring-web:$springVersion"
		compile project(':spring-xd-rest-domain')
		compile project(":spring-xd-module")
		compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
        compile "joda-time:joda-time:$jodaTimeVersion"
	}
}

project('spring-xd-rest-domain') {
	description = 'Spring XD REST Domain'
			dependencies {
		compile ("org.springframework.hateoas:spring-hateoas:$springHATEOASVersion") {
			exclude module: "spring-asm"
		}
		compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
	}
}

project('spring-xd-hadoop') {
	description = 'Spring XD Hadoop'
	dependencies {
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
		compile "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
		compile ("org.springframework.data:spring-data-hadoop:$springDataHadoopVersion") {
			exclude group: 'org.mortbay.jetty'
			exclude group: 'org.codehaus.jackson'
			exclude group: 'hsqldb'
		}
		// Needed for webhdfs sink
		runtime ("org.mortbay.jetty:jetty-util:6.1.26")
		runtime("javax.ws.rs:jsr311-api:1.1.1")
	}
}

project('spring-xd-hadoop:hadoop12') {
	description = 'Hadoop 1.2 dependencies'
	dependencies {
		runtime ("org.springframework.data:spring-data-hadoop:$springDataHadoopVersion")
		runtime ("org.apache.hadoop:hadoop-core:$hadoop12Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$hadoop12Version")
		runtime ("org.apache.hadoop:hadoop-tools:$hadoop12Version")
	}
	task copyToLib(dependsOn: build, type: Copy) {
		into "$buildDir/lib"
		from configurations.default
		include 'spring-data-hadoop-*'
		include 'hadoop-*'
	}
}

project('spring-xd-hadoop:hadoop20') {
	description = 'Hadoop 2.0 dependencies'
	dependencies {
		runtime ("org.springframework.data:spring-data-hadoop:${springDataHadoopVersion}-hadoop20")
		runtime ("org.apache.hadoop:hadoop-common:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-distcp:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-hdfs:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-core:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-jobclient:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$hadoop20Version")
		runtime ("org.apache.hadoop:hadoop-yarn-common:$hadoop20Version")
	}
	task copyToLib(dependsOn: build, type: Copy) {
		into "$buildDir/lib"
		from configurations.default
		include 'spring-data-hadoop-*'
		include 'hadoop-*'
		include 'avro-*'
		include 'protobuf-java-*'
	}
}

project('spring-xd-hadoop:cdh4') {
	description = 'Cloudera CDH 4.3.1 dependencies'
	dependencies {
		runtime ("org.springframework.data:spring-data-hadoop:${springDataHadoopVersion}-cdh4")
		runtime ("org.apache.hadoop:hadoop-common:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-distcp:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-hdfs:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-core:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-jobclient:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$cdh4Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$cdh4Version")
	}
	task copyToLib(dependsOn: build, type: Copy) {
		into "$buildDir/lib"
		from configurations.default
		include 'spring-data-hadoop-*'
		include 'hadoop-*'
		include 'avro-*'
		include 'protobuf-java-*'
	}
}

project('spring-xd-hadoop:hdp13') {
	description = 'Hortonworks HDP 1.3 dependencies'
	dependencies {
		runtime ("org.springframework.data:spring-data-hadoop:${springDataHadoopVersion}-hdp13")
		runtime ("org.apache.hadoop:hadoop-core:$hdp13Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$hdp13Version")
		runtime ("org.apache.hadoop:hadoop-tools:$hdp13Version")
	}
	task copyToLib(dependsOn: build, type: Copy) {
		into "$buildDir/lib"
		from configurations.default
		include 'spring-data-hadoop-*'
		include 'hadoop-*'
	}
}

project('spring-xd-hadoop:phd1') {
	description = 'Pivotal HD 1.0 dependencies'
	dependencies {
		runtime ("org.springframework.data:spring-data-hadoop:${springDataHadoopVersion}-phd1")
		runtime ("org.apache.hadoop:hadoop-common:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-distcp:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-hdfs:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-core:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-mapreduce-client-jobclient:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-streaming:$phd1Version")
		runtime ("org.apache.hadoop:hadoop-yarn-common:$phd1Version")
	}
	task copyToLib(dependsOn: build, type: Copy) {
		into "$buildDir/lib"
		from configurations.default
		include 'spring-data-hadoop-*'
		include 'hadoop-*'
		include 'avro-*'
		include 'protobuf-java-*'
	}
}

project('spring-xd-jdbc') {
	description = 'Spring XD JDBC'
	dependencies {
		compile "org.springframework:spring-jdbc:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springIntegrationVersion"
		runtime "org.springframework.integration:spring-integration-jdbc:$springIntegrationVersion"
		runtime "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
		runtime "org.hsqldb:hsqldb:$hsqldbVersion"
		runtime "mysql:mysql-connector-java:5.1.23"
		runtime "postgresql:postgresql:9.1-901-1.jdbc4"
	}
}

project('spring-xd-reactor') {
	description = 'Spring XD Reactor'
	dependencies {
		compile "org.projectreactor:reactor-spring:$reactorVersion",
				"org.projectreactor:reactor-tcp:$reactorVersion",
				"org.springframework.integration:spring-integration-core:$springIntegrationVersion"

		testCompile project(":spring-xd-test")
		testCompile "com.jayway.jsonpath:json-path:0.8.1"
		testCompile("org.mockito:mockito-core:$mockitoVersion") {
			exclude group: 'org.hamcrest'
		}
		testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion",
				"log4j:log4j:$log4jVersion"
	}
}

project('modules') {
	description = 'Spring XD Modules'
	dependencies {
		compile project(':spring-xd-dirt')
	}
}

project('modules.source.mail') {
	dependencies {
		runtime "org.springframework.integration:spring-integration-mail:$springIntegrationVersion"
		// Need to leave javax.mail at the dirt-server level for
		// shell integration tests to work.
		//		"com.sun.mail:javax.mail:$javaxMailVersion"

	}
}

project('modules.source.imap') {
	dependencies {
		runtime "org.springframework.integration:spring-integration-mail:$springIntegrationVersion"
		// Need to leave javax.mail at the dirt-server level for
		// shell integration tests to work.
		//		"com.sun.mail:javax.mail:$javaxMailVersion"

	}
}

project('modules.source.file') {
	dependencies {
		runtime	"org.springframework.integration:spring-integration-file:$springIntegrationVersion"
	}
}

project('modules.source.tail') {
	dependencies {
		runtime	"org.springframework.integration:spring-integration-file:$springIntegrationVersion"
	}
}

project('modules.source.http') {
	dependencies {
		runtime	project(":spring-xd-http")
	}
}

project('modules.source.syslog-tcp') {
	dependencies {
		runtime "org.springframework.integration:spring-integration-syslog:$springIntegrationVersion"
	}
}

project('modules.source.syslog-udp') {
	dependencies {
		runtime "org.springframework.integration:spring-integration-syslog:$springIntegrationVersion"
	}
}

// Does not work b/c of shared Reactor stuff in module-common.xml
//project('modules.source.reactor-syslog') {
//	dependencies {
//		runtime project(":spring-xd-reactor")
//	}
//}


project('modules.sink.file') {
	dependencies {
		runtime	"org.springframework.integration:spring-integration-file:$springIntegrationVersion"
	}
}

project('modules.sink.mail') {
	dependencies {
		runtime "org.springframework.integration:spring-integration-mail:$springIntegrationVersion"
		// Need to leave javax.mail at the dirt-server level for
		// shell integration tests to work.
		//		"com.sun.mail:javax.mail:$javaxMailVersion"

	}
}

project('spring-xd-ui') {
	description = 'Spring XD UI'
}

project('spring-xd-test') {
	description = 'Spring XD Test'
	dependencies {
		compile "org.springframework.integration:spring-integration-test:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-amqp:$springIntegrationVersion"
		compile "org.springframework.integration:spring-integration-redis:$springIntegrationVersion"
		compile "org.springframework.data:spring-data-redis:$springDataRedisVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework:spring-test:$springVersion"
		compile "com.lambdaworks:lettuce:$lettuceVersion"
		compile "org.hsqldb:hsqldb:$hsqldbVersion"
		compile "org.apache.tomcat:tomcat-jdbc:$tomcatJdbcPoolVersion"
		compile "junit:junit:$junitVersion"
		testCompile "commons-io:commons-io:2.4"
	}
}

project('spring-xd-shell') {
	description = 'Spring XD Shell'
	apply plugin: "application"
	mainClassName = "org.springframework.shell.Bootstrap"
	run {
		standardInput = System.in
	}

	test {
	     exclude '**/MailCommand*'
	}

	dependencies {
		compile "org.springframework.shell:spring-shell:$springShellVersion"
		compile project(":spring-xd-rest-client")
		compile ("org.springframework.data:spring-data-hadoop:$springDataHadoopVersion") {
			exclude group: 'org.mortbay.jetty'
			exclude group: 'hsqldb'
		}
		compile "com.google.guava:guava:14.0.1"
		testCompile project(":spring-xd-dirt")
		testCompile project(":spring-xd-test")

		testCompile "uk.co.modular-it:hamcrest-date:$hamcrestDateVersion"
		runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion",
				"org.slf4j:slf4j-log4j12:$slf4jVersion",
				"log4j:log4j:$log4jVersion"
		testCompile "com.icegreen:greenmail:1.3.1b"
		testCompile "commons-io:commons-io:2.3"

	}

	// skip the startScripts task to avoid default start script generation
	startScripts.setEnabled(false)

	task scriptFiles {
		def scripts = file("$rootDir/scripts/shell")
		outputs.dir scripts
	}
	applicationDistribution.from(scriptFiles) {
		into "bin"
	}

	task configFiles {
		def configs = file("$rootDir/spring-xd-shell/config")
		outputs.dir configs
	}

	applicationDistribution.from(configFiles) {
		into "config"
	}

	// Will be run as a side effect of
	task referenceDoc(type: JavaExec, dependsOn: compileTestJava) {
		classpath = sourceSets.test.runtimeClasspath //configurations.testCompile
		main = 'org.springframework.xd.shell.util.ReferenceDoc'
		args = ["$rootDir/build/asciidoc/guide/ShellReference.asciidoc"]
	}

}

apply plugin: 'sonar-runner'

sonarRunner {
	sonarProperties {
		property "sonar.jacoco.reportPath", "${buildDir.name}/jacoco.exec"
		property "sonar.links.homepage", linkHomepage
		property "sonar.links.ci", linkCi
		property "sonar.links.issue", linkIssue
		property "sonar.links.scm", linkScmUrl
		property "sonar.links.scm_dev", linkScmDevConnection
		property "sonar.java.coveragePlugin", "jacoco"
	}
}

task launch {
	group = 'Application'
	description = 'Launches the XD server for testing purposes'
	dependsOn 'spring-xd-dirt:run'
}

task copyRedisInstall(type: Copy, dependsOn: ":redis:bundleRedis") {
	from "$rootDir/redis/build"
	into "$buildDir/dist/spring-xd/redis"
}

task copyGemfireInstall(type: Copy, dependsOn: ":spring-xd-gemfire-server:installApp") {
	from "$rootDir/spring-xd-gemfire-server/build/install/spring-xd-gemfire-server"
	into "$buildDir/dist/spring-xd/gemfire"
}

task copyXDInstall(type: Copy, dependsOn: [":spring-xd-dirt:build", ":spring-xd-dirt:installApp"]) {
	from "$rootDir/spring-xd-dirt/build/install/spring-xd-dirt"
	into "$buildDir/dist/spring-xd/xd"
	exclude "**/lib/hadoop-*.jar"
	exclude "**/lib/spring-data-hadoop-*.jar"
}

task copyXDShellInstall(type: Copy, dependsOn: [":spring-xd-shell:installApp"]) {
	from "$rootDir/spring-xd-shell/build/install/spring-xd-shell"
	into "$buildDir/dist/spring-xd/shell"
	exclude "**/lib/hadoop-*.jar"
	exclude "**/lib/spring-data-hadoop-*.jar"
}

task copyHadoopLibs(dependsOn: [":spring-xd-hadoop:hadoop12:copyToLib", ":spring-xd-hadoop:hadoop20:copyToLib", ":spring-xd-hadoop:cdh4:copyToLib", ":spring-xd-hadoop:hdp13:copyToLib", ":spring-xd-hadoop:phd1:copyToLib"]) << {
	['hadoop12', 'hadoop20', 'cdh4', 'hdp13', 'phd1'].each { distro ->
		copy {
			from "$rootDir/spring-xd-hadoop/$distro/build/lib"
			into "$buildDir/dist/spring-xd/xd/lib/$distro"
		}
		copy {
			from "$rootDir/spring-xd-hadoop/$distro/build/lib"
			into "$buildDir/dist/spring-xd/shell/lib/$distro"
		}
	}
}

task copyInstall (type: Copy, dependsOn: ["copyRedisInstall", "copyGemfireInstall", "copyXDInstall", "copyHadoopLibs", "copyXDShellInstall"]) {
	group = 'Application'
	description = "Copy all the required installs to build/dist directory"
	from "$rootDir/scripts/README"
	from "$rootDir/scripts/LICENSE"
	into "$buildDir/dist/spring-xd"
}

configurations {
	dist
}

import org.ajoberstar.gradle.git.tasks.*
import org.apache.tools.ant.filters.TokenFilter

task pullDocs(type: GitClone) {
	if (project.gradle.startParameter.offline) {
		enabled = false
	}

	def destination = file("$buildDir/asciidoc-raw")

	uri = "git://github.com/SpringSource/spring-xd.wiki.git"
	destinationPath = destination
	bare = false

	doFirst {
		if (destination.exists()) {
			destination.deleteDir()
			file("$buildDir/asciidoc").deleteDir()
		}
	}

	doLast {
		copy {
			from("$buildDir/asciidoc-raw") {
				include  "**/*.asciidoc"
				filter { line ->
						// TODO: refine regex to only match local documents
						def match = (line =~ /link:(.*?)#(.*?)\[(.*?)\]/)
						if (match) match.replaceAll('xref:$2[$3]') else line
				}
			}
			from("$buildDir/asciidoc-raw") {
				exclude "**/*.asciidoc"
			}
			into("$buildDir/asciidoc")

		}

		new File("$buildDir/asciidoc/guide/FullGuide.adoc")
			.renameTo(new File("$buildDir/asciidoc/guide/index.adoc"))
		new File("$buildDir/asciidoc/guide/FullGuide-docinfo.xml")
			.renameTo(new File("$buildDir/asciidoc/guide/index-docinfo.xml"))

	}
}

import org.asciidoctor.gradle.*

task asciidoctorDocbook(type: AsciidoctorTask, dependsOn: [pullDocs, ':spring-xd-shell:referenceDoc']) {
	sourceDocumentName = file("$buildDir/asciidoc/guide/index.adoc")
	sourceDir = file("$buildDir/asciidoc/guide")
	outputDir = file("$buildDir/docbook")
	backend = "docbook"
	options = [
		attributes: [
			docinfo: ''
		]
	]

	doLast {
		copy {
			from "$buildDir/asciidoc/images"
			into "$buildDir/docbook/images"
		}
	}
}

task asciidoctorHtml(type: AsciidoctorTask, dependsOn: [pullDocs, ':spring-xd-shell:referenceDoc']) {
	sourceDocumentName = file("$buildDir/asciidoc/guide/index.adoc")
	sourceDir = file("$buildDir/asciidoc/guide")
	outputDir = file("$buildDir/html")
	backend = "html5"
	options = [
		attributes: [
			docinfo: '',
			toc2: '',
			imagesdir: 'images',
			stylesdir: 'stylesheets',
			stylesheet: 'golo.css',
			appversion: "$version",
			'source-highlighter': 'highlightjs'
		]
	]

	doLast {
		copy {
			from "$buildDir/asciidoc/guide/images"
			into "$buildDir/html/images"
		}
		copy {
			from "$buildDir/asciidoc/images"
			into "$buildDir/html/images/images"
		}
		copy {
			from "$buildDir/asciidoc/guide/stylesheets"
			into "$buildDir/html/stylesheets"
		}
	}
}

apply plugin: 'docbook-reference'

ext {
	expandPlaceholders = ""; //For Gradle Reference Plugin
}

reference {
	sourceFileName = 'index.xml'
	sourceDir = file("$buildDir/docbook")
	pdfFilename = 'spring-xd-reference.pdf'
}

reference.dependsOn asciidoctorDocbook

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.links(javadocLinks)
	options.overview = 'src/api/overview.html'

	source rootProject.javaProjects().collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(rootProject.javaProjects().collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference docs."

	from (api) {
		into 'api'
	}

	from (reference) {
		exclude 'htmlsingle'
		exclude 'html'
		into 'reference'
	}

	from ("$buildDir/html") {
		into "reference/html"
	}
}

task distZip(type: Zip, dependsOn: [asciidoctorHtml, copyInstall], overwrite: true) {
	group = 'Application'
	classifier = ''
	description = "Bundles the XD project and associated installs with libs and OS specific scripts as a zip file."

	ext.baseDir = "${project.name}-${project.version}";

	from("$buildDir/dist/spring-xd") {
		into "${baseDir}"
	}

	from ("$buildDir/html") {
		into "${baseDir}/docs"
	}
}

task distTar(type: Tar, dependsOn: [asciidoctorHtml, copyInstall], overwrite: true) {
	group = 'Application'
	classifier = ''
	description = "Bundles the XD project and associated installs with libs and OS specific scripts as a tar file."

	ext.baseDir = "${project.name}-${project.version}";

	from("$buildDir/dist/spring-xd") {
		into "${baseDir}"
	}

	from ("$buildDir/html") {
		into "${baseDir}/docs"
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds XD binary and reference docs distribution archives.'
}

task wrapper(type: Wrapper) {
	description = "Generates build_xd[.bat] scripts"
	gradleVersion = "1.6"
	scriptFile= "build_xd"
}
